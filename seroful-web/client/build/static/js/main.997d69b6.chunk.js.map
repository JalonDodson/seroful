{"version":3,"sources":["resources/molecule.png","store/store.js","styles/loginStyles.js","components/LoginForm/LoginForm.js","App.js","config.js","serviceWorker.js","index.js"],"names":["module","exports","emailState","atom","key","default","pwState","loginStyles","makeStyles","theme","loginDiv","textAlign","seroful","fontFamily","color","fontSize","fontWeight","fontStyle","images","height","width","button1","backgroundImage","marginTop","marginRight","button2","email","password","LoginForm","props","styles","useState","enableRegister","setEnableRegister","useRecoilState","setEmail","setPw","className","Typography","variant","src","molecule","alt","noValidate","autoComplete","TextField","label","onBlur","ev","x","target","value","type","Button","onClick","startIcon","register","login","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","init","setInit","user","setUser","pw","onAuthStateChanged","useEffect","auth","console","log","signOut","then","signInWithEmailAndPassword","catch","err","createUserWithEmailAndPassword","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.997d69b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/molecule.12ccad98.png\";","import { atom } from \"recoil\";\n\nexport const emailState = atom({\n  key: \"emailState\",\n  default: \"\",\n});\n\nexport const pwState = atom({\n  key: \"pwState\",\n  default: \"\",\n});\n","import { makeStyles } from \"@material-ui/core/styles\"\n\n\n\nexport const loginStyles = makeStyles((theme) => ({\n    loginDiv: {\n        textAlign: \"center\",\n    },\n    seroful: {\n        fontFamily: \"Happy Monkey\",\n        color: \"#21a3fc\",\n        fontSize: \"56px\",\n        fontWeight: \"bold\",\n        fontStyle: \"italic\",\n    },\n    images: {\n        height: 350,\n        width: 350,\n    },\n    button1: {\n        backgroundImage: \"linear-gradient(90deg, rgba(33,163,252,1) 0%, rgba(75,110,198,1) 51%, rgba(31,122,204,1) 100%)\",\n        width: \"9.5%\",\n        marginTop: \".5%\",\n        marginRight: \"1%\"\n    },\n    button2: {\n        backgroundImage: \"linear-gradient(90deg, rgba(75,110,198,1) 0%, rgba(31,122,204,1) 51%, rgba(33,163,252,1) 100%)\",\n        marginTop: \".5%\",\n        width: \"9.5%\"\n    },\n    email: {\n        width: \"20%\",\n    },\n    password: {\n        width: \"20%\",\n    }\n}))","import React, { useState } from \"react\";\n\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\n\nimport { emailState, pwState } from \"../../store/store\";\nimport { useRecoilState } from \"recoil\";\n\nimport molecule from \"../../resources/molecule.png\";\nimport { loginStyles } from \"../../styles/loginStyles\";\n\nexport const LoginForm = (props) => {\n  const styles = loginStyles();\n  const [enableRegister, setEnableRegister] = useState(false);\n  // eslint-disable-next-line\n  const [email, setEmail] = useRecoilState(emailState);\n  // eslint-disable-next-line\n  const [pw, setPw] = useRecoilState(pwState);\n\n  return (\n    <>\n      {!enableRegister ? (\n        <div className={styles.loginDiv}>\n          <Typography className={styles.seroful} variant=\"h3\">\n            Seroful\n          </Typography>\n          <img className={styles.images} src={molecule} alt=\"molecule.png\" />\n          <form noValidate autoComplete=\"off\">\n            <TextField\n              label=\"Email\"\n              variant=\"outlined\"\n              className={styles.email}\n              onBlur={(ev) => setEmail((x) => ev.target.value)}\n            />\n            <br />\n            <TextField\n              label=\"Password\"\n              type=\"password\"\n              variant=\"outlined\"\n              className={styles.password}\n              onBlur={(ev) => setPw((x) => ev.target.value)}\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              className={styles.button1}\n              onClick={props.login}\n            >\n              Login\n            </Button>\n            <Button\n              variant=\"contained\"\n              className={styles.button2}\n              onClick={() => setEnableRegister(true)}\n            >\n              Register\n            </Button>\n          </form>\n        </div>\n      ) : (\n        <div className={styles.loginDiv}>\n          <Typography className={styles.seroful} variant=\"h3\">\n            Seroful\n          </Typography>\n          <img className={styles.images} src={molecule} alt=\"molecule.png\" />\n          <form noValidate autoComplete=\"off\">\n            <TextField\n              label=\"Email\"\n              variant=\"outlined\"\n              className={styles.email}\n              onBlur={(ev) => setEmail((x) => ev.target.value)}\n            />\n            <br />\n            <TextField\n              label=\"Password\"\n              type=\"password\"\n              variant=\"outlined\"\n              className={styles.password}\n              onBlur={(ev) => setPw((x) => ev.target.value)}\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              className={styles.button1}\n              onClick={() => setEnableRegister(false)}\n              startIcon={<ArrowBackIcon />}\n            >\n              Back to Login\n            </Button>\n            <Button\n              variant=\"contained\"\n              className={styles.button2}\n              onClick={props.register}\n            >\n              Register\n            </Button>\n          </form>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nimport { LoginForm } from \"./components/LoginForm/LoginForm\";\nimport \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nimport { firebaseConfig } from \"./config\";\nimport { useRecoilState } from \"recoil\";\nimport { emailState, pwState } from \"./store/store\";\n\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  const [init, setInit] = useState(true);\n  const [user, setUser] = useState();\n  // eslint-disable-next-line\n  const [email, setEmail] = useRecoilState(emailState);\n  // eslint-disable-next-line\n  const [pw, setPw] = useRecoilState(pwState);\n\n  const onAuthStateChanged = (user) => {\n    setUser(user);\n    if (init) setInit(false);\n  };\n\n  useEffect(() => {\n    const subscriber = firebase.auth().onAuthStateChanged(onAuthStateChanged);\n    return subscriber;\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    console.log(email);\n  }, [email]);\n\n  const login = () => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(email, pw)\n      .then(() => console.log(\"User logged in.\"))\n      .catch((err) => console.log(err));\n    setEmail(\"\");\n    setPw(\"\");\n  };\n\n  const register = () => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, pw)\n      .then(() => console.log(\"User created successfully.\"))\n      .catch((err) => console.log(err));\n    setEmail(\"\");\n    setPw(\"\");\n  };\n\n  const logout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"User signed out.\"));\n  };\n\n  if (init) return null;\n  if (!user) {\n    return <LoginForm login={() => login()} register={() => register()} />;\n  }\n  return (\n    <>\n      Welcome to the party, {user.email}.\n      <Button variant=\"outlined\" onClick={() => logout()}>\n        Log Out\n      </Button>\n    </>\n  );\n}\nexport default App;\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyBJg9iVnvGl6F5TFBRTmoWn-3A5IxTgywI\",\n  authDomain: \"seroful.firebaseapp.com\",\n  databaseURL: \"https://seroful.firebaseio.com\",\n  projectId: \"seroful\",\n  storageBucket: \"seroful.appspot.com\",\n  messagingSenderId: \"531332449318\",\n  appId: \"1:531332449318:web:9b85133f0399aa898fd2e7\",\n  measurementId: \"G-XYW74Z91MJ\",\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}