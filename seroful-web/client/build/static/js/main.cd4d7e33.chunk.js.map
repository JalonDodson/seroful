{"version":3,"sources":["store/store.js","styles/loginStyles.js","components/LoginForm/LoginForm.js","util/api.js","App.js","config.js","serviceWorker.js","index.js","resources/molecule.png"],"names":["userState","atom","key","default","first","last","email","pw","displayName","photoURL","gradeLevel","medicines","illnesses","plans","loginStyles","makeStyles","theme","loginDiv","textAlign","seroful","fontFamily","color","fontSize","fontWeight","fontStyle","images","height","width","button1","backgroundImage","marginTop","marginRight","button2","password","LoginForm","props","styles","useState","enableRegister","setEnableRegister","useRecoilState","setUserInfo","className","Typography","variant","src","molecule","alt","noValidate","autoComplete","TextField","label","onBlur","ev","x","target","value","type","Button","onClick","startIcon","register","login","users","a","axios","get","res","console","log","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","init","setInit","user","setUser","userInfo","onAuthStateChanged","useEffect","auth","api","signInWithEmailAndPassword","then","catch","err","createUserWithEmailAndPassword","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.cd4d7e33.chunk.js","sourcesContent":["import { atom } from \"recoil\";\n\nexport const userState = atom({\n  key: \"userState\",\n  default: {\n    first: \"\",\n    last: \"\",\n    email: \"\",\n    pw: \"\",\n    displayName: \"\",\n    photoURL: \"\",\n    gradeLevel: 0,\n    medicines: [{}],\n    illnesses: [{}],\n    plans: [{}],\n  },\n});\n","import { makeStyles } from \"@material-ui/core/styles\"\n\n\n\nexport const loginStyles = makeStyles((theme) => ({\n    loginDiv: {\n        textAlign: \"center\",\n    },\n    seroful: {\n        fontFamily: \"Happy Monkey\",\n        color: \"#21a3fc\",\n        fontSize: \"56px\",\n        fontWeight: \"bold\",\n        fontStyle: \"italic\",\n    },\n    images: {\n        height: 350,\n        width: 350,\n    },\n    button1: {\n        backgroundImage: \"linear-gradient(90deg, rgba(33,163,252,1) 0%, rgba(75,110,198,1) 51%, rgba(31,122,204,1) 100%)\",\n        width: \"9.5%\",\n        marginTop: \".5%\",\n        marginRight: \"1%\"\n    },\n    button2: {\n        backgroundImage: \"linear-gradient(90deg, rgba(75,110,198,1) 0%, rgba(31,122,204,1) 51%, rgba(33,163,252,1) 100%)\",\n        marginTop: \".5%\",\n        width: \"9.5%\"\n    },\n    email: {\n        width: \"20%\",\n    },\n    password: {\n        width: \"20%\",\n    }\n}))","import React, { useState } from \"react\";\n\nimport { Button, TextField, Typography } from \"@material-ui/core\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\n\nimport { userState } from \"../../store/store\";\nimport { useRecoilState } from \"recoil\";\n\nimport molecule from \"../../resources/molecule.png\";\nimport { loginStyles } from \"../../styles/loginStyles\";\n\nexport const LoginForm = (props) => {\n  const styles = loginStyles();\n  const [enableRegister, setEnableRegister] = useState(false);\n  // eslint-disable-next-line\n  const [userInfo, setUserInfo] = useRecoilState(userState);\n\n  return (\n    <>\n      {!enableRegister ? (\n        <div className={styles.loginDiv}>\n          <Typography className={styles.seroful} variant=\"h3\">\n            Seroful\n          </Typography>\n          <img className={styles.images} src={molecule} alt=\"molecule.png\" />\n          <form noValidate autoComplete=\"off\">\n            <TextField\n              label=\"First Name\"\n              variant=\"outlined\"\n              className={styles.email}\n              onBlur={(ev) =>\n                setUserInfo((x) => (x = { ...x, first: ev.target.value }))\n              }\n            />\n            <br />\n            <TextField\n              label=\"Last Name\"\n              variant=\"outlined\"\n              className={styles.password}\n              onBlur={(ev) =>\n                setUserInfo((x) => (x = { ...x, last: ev.target.value }))\n              }\n            />\n            <br />\n            <br />\n            <TextField\n              label=\"Email\"\n              variant=\"outlined\"\n              className={styles.email}\n              onBlur={(ev) =>\n                setUserInfo((x) => (x = { ...x, email: ev.target.value }))\n              }\n            />\n            <br />\n            <TextField\n              label=\"Password\"\n              type=\"password\"\n              variant=\"outlined\"\n              className={styles.password}\n              onBlur={(ev) =>\n                setUserInfo((x) => (x = { ...x, pw: ev.target.value }))\n              }\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              className={styles.button1}\n              onClick={props.login}\n            >\n              Login\n            </Button>\n            <Button\n              variant=\"contained\"\n              className={styles.button2}\n              onClick={() => setEnableRegister(true)}\n            >\n              Register\n            </Button>\n          </form>\n        </div>\n      ) : (\n        <div className={styles.loginDiv}>\n          <Typography className={styles.seroful} variant=\"h3\">\n            Seroful\n          </Typography>\n          <img className={styles.images} src={molecule} alt=\"molecule.png\" />\n          <form noValidate autoComplete=\"off\">\n          <TextField\n              label=\"Email\"\n              variant=\"outlined\"\n              className={styles.email}\n              onBlur={(ev) =>\n                setUserInfo((x) => (x = { ...x, email: ev.target.value }))\n              }\n            />\n            <br />\n            <TextField\n              label=\"Password\"\n              type=\"password\"\n              variant=\"outlined\"\n              className={styles.password}\n              onBlur={(ev) =>\n                setUserInfo((x) => (x = { ...x, pw: ev.target.value }))\n              }\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              className={styles.button1}\n              onClick={() => setEnableRegister(false)}\n              startIcon={<ArrowBackIcon />}\n            >\n              Back to Login\n            </Button>\n            <Button\n              variant=\"contained\"\n              className={styles.button2}\n              onClick={props.register}\n            >\n              Register\n            </Button>\n          </form>\n        </div>\n      )}\n    </>\n  );\n};\n","import axios from \"axios\";\n\nexport const users = async () => {\n  try {\n    const res = await axios.get(\"/users\");\n    return res;\n  } catch (err) {\n    console.log(err);\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@material-ui/core\";\n\nimport { LoginForm } from \"./components/LoginForm/LoginForm\";\nimport \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nimport { firebaseConfig } from \"./config\";\nimport { useRecoilState } from \"recoil\";\nimport { userState } from \"./store/store\";\n// import { api } from \"../../functions\";\nimport * as api from \"./util/api\"\n/* \n\n  api.users() // then some shit here\n*/\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  const [init, setInit] = useState(true);\n  const [user, setUser] = useState();\n  // eslint-disable-next-line\n  const [userInfo, setUserInfo] = useRecoilState(userState);\n\n  const onAuthStateChanged = (user) => {\n    setUser(user);\n    if (init) setInit(false);\n  };\n\n  useEffect(() => {\n    const subscriber = firebase.auth().onAuthStateChanged(onAuthStateChanged);\n    return subscriber;\n    // eslint-disable-next-line\n  }, []);\n\n  const login = () => {\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(userInfo.email, userInfo.pw)\n      .then(() => console.log(\"User logged in.\"))\n      .catch((err) => console.log(err));\n    setUserInfo({\n      email: \"\",\n      pw: \"\",\n    });\n  };\n\n  const register = () => {\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(userInfo.email, userInfo.pw)\n      .then(() => console.log(\"User created successfully.\"))\n      .catch((err) => console.log(err));\n    setUserInfo({\n      email: \"\",\n      pw: \"\",\n    });\n  };\n  const logout = () => {\n    firebase\n      .auth()\n      .signOut()\n      .then(() => console.log(\"User signed out.\"));\n  };\n\n  if (init) return null;\n  if (!user) {\n    return <LoginForm login={() => login()} register={() => register()} />;\n  }\n  return (\n    <>\n      Welcome to the party, {user.email}.\n      <Button variant=\"outlined\" onClick={() => api.users()}>\n        Log Out\n      </Button>\n    </>\n  );\n}\nexport default App;\n","export const firebaseConfig = {\n  apiKey: \"AIzaSyBJg9iVnvGl6F5TFBRTmoWn-3A5IxTgywI\",\n  authDomain: \"seroful.firebaseapp.com\",\n  databaseURL: \"https://seroful.firebaseio.com\",\n  projectId: \"seroful\",\n  storageBucket: \"seroful.appspot.com\",\n  messagingSenderId: \"531332449318\",\n  appId: \"1:531332449318:web:9b85133f0399aa898fd2e7\",\n  measurementId: \"G-XYW74Z91MJ\",\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { RecoilRoot } from \"recoil\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/molecule.12ccad98.png\";"],"sourceRoot":""}